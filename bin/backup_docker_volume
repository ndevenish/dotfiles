#!/bin/bash

set -euo pipefail


USAGE="Usage: $(basename "$0") [-h|--help] <volume_name> [[<tar_arg>] ...]"
if [[ $# -eq 0 ]]; then
    echo "$USAGE"
    exit 1
fi

if [[ $1 == --help || $1 == -h ]]; then
    cat <<EOF
$USAGE

Where:
    <volume_name>   The name of the docker volume to backup
    <tar_arg>       Any additional options to tar e.g. exclusions

Back up a docker volume. This is done with tars '--exclude-caches'
option, which means any folders with the file CACHEDIR.TAG whose
contents start with 'Signature: 8a477f597d28d172789f06886806bc55'
will be ignored as part of the backup (so only the folder and tag
file themselves will be included). See https://bford.info/cachedir/
for details on this scheme.
EOF
    exit 0
fi

VOLUME="$1"
shift

# Find what docker is called
if command -v docker >/dev/null; then
    docker=docker
elif command -v podman >/dev/null; then
    docker=podman
fi


# Make sure this volume exists
if ! $docker volume inspect "$VOLUME" >/dev/null 2>&1; then
    echo "Error: There appears to be no volume named '$VOLUME'"
    exit 1
fi

backup_file=$(date "+backup_${VOLUME}_%Y-%m-%d_%H-%M-%S.tar")
# Create now and then append so that it has our permissions
#touch "$backup_file"
# tar --append -v "$@" --exclude-caches -f "/backup/${backup_file}" "/$VOLUME"
if ! (
    set -euo pipefail
    set -x
    $docker run --rm -itv "$VOLUME:/$VOLUME" -v "$(pwd):/backup" ubuntu \
        tar -c -f "/backup/$backup_file" -v "$@" --exclude-caches "/$VOLUME"
); then
    echo "$(tput bold)Tarball creation failed, removing intermediate file$(tput sgr0) $backup_file"
    rm "$backup_file"
    exit 1
fi
echo "$(tput bold)Compressing backup$(tput sgr0)"
xz -v "$backup_file"

